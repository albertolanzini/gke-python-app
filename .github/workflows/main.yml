# .github/workflows/main.yml

name: GKE Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Authenticate to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: 'latest'
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install GKE gcloud auth plugin
    run: |
      gcloud components install gke-gcloud-auth-plugin
      gcloud config set container/use_client_certificate True
      export USE_GKE_GCLOUD_AUTH_PLUGIN=True

    - name: Set up GKE Cluster Credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
        --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
        --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Verify Kubernetes Cluster Connectivity
      run: |
      kubectl get nodes

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

    - name: Build Docker Image using Buildx
      run: |
        docker buildx build \
        --platform linux/amd64 \
        -t ${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPO }}/gke-python-app:$GITHUB_SHA \
        --push --progress plain \
        .

    - name: Deploy to GKE using Helm
      run: |
        helm upgrade --install gke-python-release ./my-helm-chart \
          --set image.repository=${{ secrets.ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.ARTIFACT_REGISTRY_REPO }}/gke-python-app \
          --set image.tag=$GITHUB_SHA \
      # --set service.type=LoadBalancer

    - name: Get Service External IP
      run: |
        echo "Waiting for LoadBalancer to get an external IP..."
        sleep 60  # Wait for a minute to ensure the IP is assigned
        export SERVICE_IP=$(kubectl get svc --namespace default gke-python-release --template="{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}")
        echo "The application is available at: http://$SERVICE_IP:8080"
